openapi: "3.0.0"
info:
  title: McMaster CanIDS
  version: 2.0.0
  
paths:
  /:
    get:
      summary: Master Route
      description: |
        This route will peform conditional actions:
        - If the system has not been initialized, it will redirect to `/setup`.
        - If the middleware is disabled, or if the user is authenticated, it will redirect to `/dashboard`.
        - Finally, if the user is not authenticated, it will redirect to `/login`.
      tags:
      - Primary
      responses:
        '307':
          description: HTTP redirect

  /login:
    get:
      summary: Login page
      description: |
        This will display the login page.
      tags:
      - Primary
      responses:
        '200':
          description: "HTML login page"
    post:
      summary: Login page action
      description: |
        A post request is made when the user submits the login form. There are two possible responses:
          - Success: the authentication was successful. The server will respond with an `X-State` token (the authentication token), and after 3 seconds, will redirect to the dashboard.
          - Failure: the authentication failed. The user will have to try again.
      tags:
      - Primary
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                user:
                  type: string
                pass:
                  type: string
              required:
                - user
                - pass
      responses:
        '200':
          description: "HTML login page"
          
  /logout:
    get:
      summary: Logout page
      description: |
        The page will clear the `X-State` token out of the browser's cookies. It will then display a page indicating that the user was successfully logged out.
      tags:
      - Primary
      responses:
        '200':
          description: "HTML logout page"
          
  /setup:
    get:
      summary: Setup page
      description: |
        The setup page is responsible for creating the first user and initalizing the `auth` index.
      tags:
      - Primary
      responses:
        '200':
          description: "HTML setup page"
    post:
      summary: Setup page action
      description: |
        A post request is made when the user submits the setup form. If a field is invalid (e.g. blank or non-equal passwords), an error will be returned.
        
        If successful, after 3 seconds, the user will be redirected to `/login`.
      tags:
      - Primary
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                pass:
                  type: string
                passConfirm:
                  type: string
              required:
                - name
                - email
                - pass
                - passConfirm
      responses:
        '200':
          description: "HTML setup page"
          
          
  /requestReset:
    get:
      summary: Request password reset page
      description: |
        This will display the request password reset page.
      tags:
      - Primary
      responses:
        '200':
          description: "HTML request password reset page"
    post:
      summary: Request password reset action
      description: |
        A post request is made when the user submits the request password reset form.
        
        If the account is registered and a password reset email can not be sent, an error will be returned. Else, even if the account isn't registered, a success message will be returned (for security purposes).
      tags:
      - Primary
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                email:
                  type: string
              required:
                - email
      responses:
        '200':
          description: "HTML request password reset page"
          
          
  /reset:
    get:
      summary: Password reset page
      description: |
        This will display the page where the user can provide a new password.
      tags:
      - Primary
      responses:
        '200':
          description: "HTML password reset page"
    post:
      summary: Password reset action
      description: |
        A post request is made when the user submits the password reset form.
        
        If both passwords are equal, the token has not expired, and the database entry can be updated, a success message will be returned. Else, an error will be returned.
      tags:
      - Primary
      parameters: 
        - in: query
          name: token
          schema:
            type: string
          description: |
            Password reset token from email.
          required: true
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                pass:
                  type: string
                passConfirm:
                  type: string
              required:
                - pass
                - passConfirm
      responses:
        '200':
          description: "HTML request password reset page"

  /register:
    get:
      summary: User registration page
      description: |
        This will display the user registration page.
      tags:
      - Primary
      responses:
        '200':
          description: "HTML user registration page"
    post:
      summary: User registration page action
      description: |
        A post request is made when the user submits the registration form. If a field is invalid (e.g. blank or non-equal passwords), an error will be returned.
        
        If successful, after 6 seconds, the user will be redirected to `/login`.
      tags:
      - Primary
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                pass:
                  type: string
                passConfirm:
                  type: string
              required:
                - name
                - email
                - pass
                - passConfirm
      responses:
        '200':
          description: "HTML user registration page"
          
  /status:
    get:
      summary: System status 
      description: |
        The status endpoint returns real time information about the backend. It can be used to test the health of the backend.
      tags:
      - Health
      responses:
        '200':
          description: "Status information"
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                    description: |
                      Name of application
                  build:
                    type: string
                    description: |
                      Git commit hash
                  isDocker:
                    type: boolean
                    description: |
                      Indicator if running in Docker network
                  elasticPing:
                    type: boolean
                    description: |
                      Indicator if Elasticsearch is reachable
                  time:
                    type: string
                    description: |
                      Server time
                  uptime:
                    type: string
                    description: |
                      Backend uptime
                required:
                  - name
                  - build
                  - isDocker
                  - elasticPing
                  - time
                  - uptime
              example: {
                "name": "McMaster CanIDS",
                "build": "d9f2dc3",
                "isDocker": true,
                "elasticPing": true,
                "time": "2020-02-21T20:56:29Z",
                "uptime": "1h5m31.570680928s"
              }
  
  api/auth/setup:
    post:
      summary: User setup endpoint
      description: |
        Takes email, password, and name to create new user, setting cookies to log them in at the same time
      tags:
      - Primary
      requestBody:
        required: true
        content:
          type: json object
          properties:
            Name:
              type: string
              description: |
                The name of the prospective user
            UUID:
              type: string
              description: |
                The email address of the prospective user
            Password:
              type: string
              description: |
                The desired password of the prospective user
            PasswordConfirm:
              type: string
              description: |
                The re-entered password of the prospective user
      responses:
        '200':
          description: |
            Successfully created user, logged in
        '400':
          description: |
            Unable to decode json, not all fields provided, email already exists in db, passwords are not equal
        '500':
          description: |
            Error hashing password or inserting user into database, failed to create token for login

  api/auth/login:
    post:
      summary: Login endpoint
      description: |
        This takes in user credentials for validation and sets the X-State and X-Class cookies.
      tags:
      - Primary
      requestBody:
        required: true
        content:
          type: json object
          properties:
            UUID:
              type: string
              description: |
                email of the user loging in
            Password:
              type: string
              description: |
                password of the user loging in
      responses:
        '200':
          description: |
            Successfully set X-State and X-Class cookies.
        '400':
          description: |
            Bad request format or improper username/password combination
        '500':
          description: |
            Authentication is not ready

  api/auth/logout:
    get:
      summary: Logout endpoint
      description: |
        This will clear the X-Class and X-State cookies from the browser.
      tags:
      - Primary
      responses:
        '200':
          description: Succesfully removed the X-Class and X-State cookies
        '500':
          description: Authentication is not ready

  api/auth/requestReset:
    post:
      summary: Request password reset
      description: |
        Will send email to provided address with url to password reset page. Error will only be returned if email cannot be sent, success will be returned regardless of whether the email was sent to a valid user or not (for security purposes).
      tags:
      - Primary
      requestBody:
        required: true
        content:
          type: json object
          properties:
            UUID:
              type: string
              description: |
                Email of user to send password reset url to
      responses:
        '200':
          description: |
            Successfully sent email to provided address
        '400':
          description: |
            Email not present or json decoding failed
        '500':
          description: |
            Auth not ready, failed to generate token, failed to send email
        
  api/auth/resetPassword:
    post:
      summary: Reset user password
      description: |
        This will set a new password for a user.
      tags:
      - Primary
      requestBody:
        required: true
        content:
          type: json object
          properties:
            Token:
              type: string
              description: |
                Token associated to password reset sent to user in email
            Password:
              type: string
              description: |
                Desired password set by user
            PasswordConfirm:
              type: string
              description: |
                Confirm desired password set by user
      responses:
        '200':
          description: |
            Successfully reset password
        '400':
          description: |
            Cannot decode json, fields not present, passwords don't match, token is expired
        '500':
          description: |
            Authentication not ready, error hashing password, error querying user, error updating passowrd

  api/auth/registerUser:
    post:
      summary: User self registration endpoint
      description: |
        Takes email, password, and name to create new user
      tags:
      - Primary
      requestBody:
        required: true
        content:
          type: json object
          properties:
            Name:
              type: string
              description: |
                The name of the prospective user
            UUID:
              type: string
              description: |
                The email address of the prospective user
            Password:
              type: string
              description: |
                The desired password of the prospective user
            PasswordConfirm:
              type: string
              description: |
                The re-entered password of the prospective user
      responses:
        '200':
          description: |
            Successfully created user
        '400':
          description: |
            Unable to decode json, not all fields provided, email already exists in db, passwords are not equal
        '500':
          description: |
            Error hashing password or inserting user into database
  api/auth/isActive:
    get:
      summary: Whether auth is active
      description: |
        Returns true if the auth index exists and is not empty
      tags:
      - Primary
      responses:
        '200':
          description: Succesfully returned boolean
          example: {
            "active": false
          }

  /api/user/info:
    get:
      summary: User info
      description: |
        Returns information about the current user.
      tags:
      - User
      responses:
        '200':
          description: |
            User Information
          content:
            application/json:
              schema:
                type: object
                properties:
                  uuid:
                    type: string
                    description: |
                      UUID of user
                  type:
                    type: string
                    description: |
                      User access control class
                  name:
                    type: string
                    description: |
                      Name of user
                  activated:
                    type: boolean
                    description: |
                      Indicator if account is activated
                  exp:
                    type: integer
                    description: |
                      JSON Web Token (JWT) expire time
                  iat:
                    type: integer
                    description: |
                      JSON Web Token (JWT) issue time
                required:
                  - uuid
                  - type
                  - name
                  - activated
                  - exp
                  - iat
              example: {
                "uuid": "ryant3@mcmaster.ca",
                "type": "admin",
                "name": "Tanner Ryan",
                "activated": true,
                "exp": 1582940725,
                "iat": 1582335925
              }
        '401':
          description: |
            User is not authenticated
        '500':
          description: |
            Internal server error
            
  /api/user/add:
    post:
      summary: Create new user
      description: |
        Create a user account on someone's behalf.
        
        Restrictions:
          - `admin` can create all types of accounts.
          - `standard` can not create accounts.
          
        If an account is successfully created, the user will be emailed with instructions to activate the account and set a password.
      tags:
      - User
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: |
                    Name of user
                uuid:
                  type: string
                  description: |
                    Email address of user
                class:
                  type: string
                  description: |
                    Type of user account: `standard`, `admin`
              required:
                - name
                - uuid
                - class
            example: {
              "name": "Tanner Ryan",
              "uuid": "ryant3@mcmaster.ca",
              "class": "admin",
            }
      responses:
        '200':
          description: |
            Account successfully created. User emailed with activation instructions.
          content:
            application/json:
              example: {
                "success": true,
                "message": "The user account has been successfully created. The user has been emailed to complete account activation."
              }
        '400':
          description: |
            Request parameters are not valid.
          content:
            application/json:
              example: {
                "success": false,
                "message": "Bad request format."
              }
        '401':
          description: |
            User is not authenticated
        '403':
          description: |
            User does not have permissions to perform requested actions.
          content:
            application/json:
              example: {
                "success": false,
                "message": "Standard users can not add users."
              }
        '500':
          description: |
            Internal server error

  /api/user/list:
    get:
      summary: List all users
      description: |
        List users in the system.
        - If user performing request is `standard` or `admin`, all users in the system will be returned.
      tags:
      - User
      responses:
        '200':
          description: |
            List of users
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    description: |
                      Indicator if request was successful
                  users:
                    type: array
                    description: |
                      List of users
                    items:
                      type: object
                      properties:
                        name:
                          type: string
                          description: |
                            Name of user
                        uuid:
                          type: string
                          description: |
                            Email of user
                        class:
                          type: string
                          description: |
                            Type of user account: `standard`, `admin`
                        activated:
                          type: boolean
                          description: |
                            Indicator if account is activated
                        updatePermission:
                          type: boolean
                          description: |
                            Indicator if requesting user can modify this account
                      required: 
                        - name
                        - uuid
                        - class
                        - activated
                        - updatePermission
                required:
                  - success
                  - users
              example: {
                "success": true,
                "users": [
                  {
                    "name": "Tanner Ryan",
                    "uuid": "ryant3@mcmaster.ca",
                    "class": "admin",
                    "activated": true,
                    "updatePermission": true
                  }
                ]
              }
                  
        '401':
          description: |
            User is not authenticated
        '500':
          description: |
            Internal server error

  /api/user/update:
    post:
      summary: Update existing user
      description: |
        Update an existing user account.
        
        If the `uuid` query parameter is present, this will modify the other user. If the query parameter is not present, this will modify the requesting user.
        
        Restrictions:
          - `standard` can only modify own fields:
            - `name`
            - `uuid`
          - `admin` can modify everyone's fields:
            - `name`
            - `uuid`
            - `class`
            - `activated`
          
        To prevent lockout, an `admin` can not modify their own `class` and `activated`.
        
        While the database is modified in real time, a logged in user may not notice changes for up to 1 minute. The APIs will update in real time. This is due to token caching.
        
      tags:
      - User
      parameters: 
        - in: query
          name: uuid
          schema:
            type: string
          description: |
            UUID of other user to modify.
          required: false
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: |
                    Name of user
                uuid:
                  type: string
                  description: |
                    Email address of user
                class:
                  type: string
                  description: |
                    Type of user account: `standard`, `admin`
                activated:
                    type: boolean
                    description: |
                      Indicator if account is activated
              required:
                - name
                - uuid
                - class
                - activated
            example: {
              "name": "Tanner Ryan",
              "uuid": "ryant3@mcmaster.ca",
              "class": "admin",
              "activated": true,
            }
      responses:
        '200':
          description: |
            Account successfully updated. Changes will be applied within 1 minute.
          content:
            application/json:
              example: {
                "success": true,
                "message": "The user account has been successfully updated. Changes will be applied within 1 minute."
              }
        '400':
          description: |
            Request parameters are not valid.
          content:
            application/json:
              example: {
                "success": false,
                "message": "Bad request format."
              }
        '401':
          description: |
            User is not authenticated
        '403':
          description: |
            User does not have permissions to perform requested actions.
          content:
            application/json:
              example: {
                "success": false,
                "message": "Standard users can only modify their own account."
              }
        '500':
          description: |
            Internal server error

  /api/user/resetPass:
    post:
      summary: Reset password for other user
      description: |
        Sends a password reset email for another user.
        
        Restrictions:
          - `standard` can not request reset.
          - `admin` request reset for all users.
        
      tags:
      - User
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                uuid:
                  type: string
                  description: |
                    Email of user account to request password reset
              required:
                - uuid
            example: {
              "uuid": "ryant3@mcmaster.ca",
            }
      responses:
        '200':
          description: |
            Successfully requested password reset.
          content:
            application/json:
              example: {
                "success": true,
                "message": "A password reset has been successfully issued for the user."
              }
        '400':
          description: |
            Request parameters are not valid.
          content:
            application/json:
              example: {
                "success": false,
                "message": "Bad request format."
              }
        '401':
          description: |
            User is not authenticated
        '403':
          description: |
            User does not have permissions to perform requested actions.
          content:
            application/json:
              example: {
                "success": false,
                "message": "Standard user can not reset password."
              }
        '500':
          description: |
            Internal server error
            
  /api/user/delete:
    post:
      summary: Delete existing user
      description: |
        Delete existing account.
        
        Restrictions:
          - `standard` can not delete users.
          - `admin` can delete all users.
        
        To prevent lockout, an `admin` can not delete their own account.
        
      tags:
      - User
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                uuid:
                  type: string
                  description: |
                    Email of user account to delete
              required:
                - uuid
            example: {
              "uuid": "ryant3@mcmaster.ca",
            }
      responses:
        '200':
          description: |
            Account successfully deleted.
          content:
            application/json:
              example: {
                "success": true,
                "message": "The user account has been successfully deleted."
              }
        '400':
          description: |
            Request parameters are not valid.
          content:
            application/json:
              example: {
                "success": false,
                "message": "Bad request format."
              }
        '401':
          description: |
            User is not authenticated
        '403':
          description: |
            User does not have permissions to perform requested actions.
          content:
            application/json:
              example: {
                "success": false,
                "message": "Standard user can not delete users."
              }
        '500':
          description: |
            Internal server error

  /api/view/list:
    get:
      summary: List all views
      description: |
        Returns a list of all views.
      tags:
      - View
      responses:
        '200':
          description: |
            List of views
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    description: |
                      Indicator if request was success
                  views:
                    type: array
                    description: |
                      List of views
                    items:
                      type: object
                      properties:
                        uuid:
                          type: string
                          description: |
                            UUID of view
                        name:
                          type: string
                          description: |
                            Name of view
                        class:
                          type: string
                          description: |
                            Type of view: `line`, `bar`, `pie`, `table`
                        field:
                          type: string
                          description: |
                            Data field to use for view
                        fieldName:
                          type: string
                          description: |
                            Common field name
                      required:
                      - uuid
                      - name
                      - class
                      - field
                      - fieldName
                required:
                - success
                - views
              example: {
                "success": true,
                "views": [
                  {
                    "uuid": "70884425-0cab-4840-a99e-ee397a9dbc71",
                    "name": "Packet Count JHE",
                    "class": "line",
                    "field": "packets",
                    "fieldName": "Packets"
                  }
                ]
              }
        '401':
          description: |
            User is not authenticated
        '500':
          description: |
            Internal server error
            
  /api/view/add:
    post:
      summary: Create new view
      description: |
        Create a view.
        
        Restrictions:
          - Only an `admin` can create views.
  
        Available view classes:
          - `line`
          - `bar`
          - `pie`
          - `table`
      tags:
      - View
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: |
                    Name of view
                class:
                  type: string
                  description: |
                    Type of view: `line`, `bar`, `pie`, `table`
                field:
                  type: string
                  description: |
                    Data field to use for view
                fieldName:
                  type: string
                  description: |
                    Common field name
              required:
                - name
                - class
                - field
                - fieldName
            example: {
              "name": "JHE Incoming Packets",
              "class": "line",
              "field": "packets_incoming",
              "fieldName": "Packets"
            }
      responses:
        '200':
          description: |
            View successfully created.
          content:
            application/json:
              example: {
                "success": true,
                "message": "View successfully created."
              }
        '400':
          description: |
            Request parameters are not valid.
          content:
            application/json:
              example: {
                "success": false,
                "message": "Bad request format."
              }
        '401':
          description: |
            User is not authenticated
        '403':
          description: |
            User does not have permissions to perform requested actions.
          content:
            application/json:
              example: {
                "success": false,
                "message": "Admin users can not add foreign views."
              }
        '500':
          description: |
            Internal server error
            
  /api/view/update:
    post:
      summary: Upate existing view
      description: |
        Update an existing view.
        
        Restrictions:
          - `admin` can update any view
          
      tags:
      - View
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                uuid:
                  type: string
                  description: |
                    UUID of view to update
                name:
                  type: string
                  description: |
                    Name of view
                class:
                  type: string
                  description: |
                    Type of view: `line`, `bar`, `pie`, `table`
                field:
                  type: string
                  description: |
                    Data field to use for view
                fieldName:
                  type: string
                  description: |
                    Common field name
              required:
                - uuid
                - name 
                - class
                - field
                - fieldName
            example: {
              "uuid": "70884425-0cab-4840-a99e-ee397a9dbc71",
              "name": "JHE Incoming Packets",
              "class": "line",
              "field": "packets_incoming",
              "fieldName": "Packets"
            }
      responses:
        '200':
          description: |
            View successfully updated.
          content:
            application/json:
              example: {
                "success": true,
                "message": "View successfully updated."
              }
        '400':
          description: |
            Request parameters are not valid.
          content:
            application/json:
              example: {
                "success": false,
                "message": "Bad request format."
              }
        '401':
          description: |
            User is not authenticated
        '403':
          description: |
            User does not have permissions to perform requested actions.
          content:
            application/json:
              example: {
                "success": false,
                "message": "Admin users can not add foreign views."
              }
        '500':
          description: |
            Internal server error
            
  /api/view/delete:
    post:
      summary: Delete existing view
      description: |
        Delete an existing view.
        
        Restrictions:
          - `admin` can delete any view.
          
      tags:
      - View
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                uuid:
                  type: string
                  description: |
                    UUID of view to delete
              required:
                - uuid
            example: {
              "uuid": "70884425-0cab-4840-a99e-ee397a9dbc71"
            }
      responses:
        '200':
          description: |
            View successfully deleted.
          content:
            application/json:
              example: {
                "success": true,
                "message": "View successfully deleted."
              }
        '400':
          description: |
            Request parameters are not valid.
          content:
            application/json:
              example: {
                "success": false,
                "message": "Bad request format."
              }
        '401':
          description: |
            User is not authenticated
        '403':
          description: |
            User does not have permissions to perform requested actions.
          content:
            application/json:
              example: {
                "success": false,
                "message": "Admin users can not delete foreign views."
              }
        '500':
          description: |
            Internal server error

  /api/dashboard/get:
    get:
      summary: Fetch dashboard
      description: |
        Returns the dashboard. If a dashboard does not exist, automatically pre-loads views and the dashboard.
      tags:
      - Dashboard
      responses:
        '200':
          description: |
            Dashboard configuration
          content:
            application/json:
              schema:
                type: object
                properties:
                  uuid:
                    type: string
                    description: |
                      Dashboard UUID
                  name:
                    type: string
                    description: |
                      Dashboard name
                  views:
                    type: array
                    description: |
                      List of views in dashboard
                    items:
                      type: string
                      description: |
                        View UUID in dashboard
                  sizes:
                    type: array
                    description: |
                      List of sizes corresponding to views: `half` or `full` width
                    items:
                      type: string
                      description: |
                        Size corresponding to UUID in dashboard
                required:
                - uuid
                - name
                - views
                - sizes
              example: {
                "uuid": "7290169e-9bdf-437b-8dd6-456b17341f05",
                "name": "McMaster University Dashboard",
                "views": [
                  "70884425-0cab-4840-a99e-ee397a9dbc71",
                  "b93b03f2-64ce-45cd-8737-9f99ed885253"
                ],
                "sizes": [
                  "half",
                  "half"
                ]
              }
        '401':
          description: |
            User is not authenticated
        '500':
          description: |
            Internal server error
            
  /api/dashboard/update:
    post:
      summary: Update dashboard
      description: |
        Update an existing view.
        
        Restrictions:
          - `admin` can update any dashboard
      tags:
      - Dashboard
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                uuid:
                  type: string
                  description: |
                    Dashboard UUID
                name:
                  type: string
                  description: |
                    Dashboard name
                views:
                  type: array
                  description: |
                    List of views in dashboard
                  items:
                    type: string
                    description: |
                      View UUID in dashboard
                sizes:
                  type: array
                  description: |
                    List of sizes corresponding to views: `half` or `full` width
                  items:
                    type: string
                    description: |
                      Size corresponding to UUID in dashboard
              required:
              - uuid
              - name
              - views
              - sizes
            example: {
              "uuid": "7290169e-9bdf-437b-8dd6-456b17341f05",
              "name": "McMaster University Dashboard",
              "views": [
                "70884425-0cab-4840-a99e-ee397a9dbc71",
                "b93b03f2-64ce-45cd-8737-9f99ed885253"
              ],
              "sizes": [
                "full",
                "full"
              ]
            }
      responses:
        '200':
          description: |
            Dashboard successfully updated.
          content:
            application/json:
              example: {
                "success": true,
                "message": "Dashboard successfully updated."
              }
        '400':
          description: |
            Request parameters are not valid.
          content:
            application/json:
              example: {
                "success": false,
                "message": "Bad request format."
              }
        '401':
          description: |
            User is not authenticated
        '403':
          description: |
            User does not have permissions to perform requested actions.
          content:
            application/json:
              example: {
                "success": false,
                "message": "Admin users can not update foreign dashboard."
              }
        '500':
          description: |
            Internal server error

  /api/alarm/data:
    post:
      summary: Fetch alarms
      description: |
        Returns the alarms that fit given a set of parameters.
      tags:
      - Alarm
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                index:
                  type: array
                  description: |
                    List of indexes to pull alarms from
                  items:
                    type: string
                source:
                  type: array
                  description: |
                    List of source blacklists to pull alarms from
                  items:
                    type: string  
                dest:
                  type: array
                  description: |
                    List of destination blacklists to pull alarms from
                  items:
                    type: string  
                start:
                  type: string
                  description: |
                    Start timestamp of alarms query
                end:
                  type: string
                  description: |
                    End timestamp of alarms query
                maxSize:
                  type: integer
                  description: |
                    Maximum number of alarms per page
                from:
                  type: integer
                  description: |
                    Search offset of alarms query
                sourceIp:
                  type: string
                  description: |
                    Prefix string of source IP (returned alarms will have source IP starting with string passed here. "" will not filter by sourceIP)
                destIp:
                  type: string
                  description: |
                    Prefix string of desitnation IP (returned alarms will have source IP starting with string passed here. "" will not filter by destIP)
              required:
                - index
                - source
                - start
                - end
                - maxSize
                - from
            example: {
              "index": ["http.log.alarm", "dns.log.alarm"],
              "source": ["firehol_abusers_1d", "firehol_abusers_30d", "firehol_anonymous", "firehol_level2"],
              "dest":  ["firehol_abusers_1d", "firehol_abusers_30d", "firehol_anonymous", "firehol_level2"],
              "start": "2019-05-01T12:41:55.000Z",
              "end": "2023-05-15T13:11:55.495Zd",
              "maxSize": 4,
              "from": 0
              "sourceIp": "192.16"
              "destIp": ""
            }
      responses:
        '200':
          description: |
            List of alarms and the number of query matches found
          content:
            application/json:
              schema:
                type: object
                properties:
                  alarms:
                    type: array
                    description: |
                      List of alarms
                    items:
                      type: object
                      properties:
                        uid:
                          type: string
                          description: |
                            Alarm UID
                        host:
                          type: string
                          description: |
                            Common blacklist name
                        timestamp:
                          type: string
                          description: |
                            Timestamp of log entry
                        id_orig_h:
                          type: string
                          description: |
                            Source IP address
                        id_orig_p:
                          type: integer
                          description: |
                            Soure port
                        id_orig_h_pos:
                          type: array
                          description: |
                            Source triggered blacklists
                          items:
                            type: string
                        id_resp_h:
                          type: string
                          description: |
                            Destination IP address
                        id_resp_p:
                          type: integer
                          description: |
                            Destination port
                        id_resp_h_pos:
                          type: array
                          description: |
                            Destination triggered blacklists
                          items:
                            type: string
                      required:
                        - uid
                        - host
                        - timestamp
                        - id_orig_h
                        - id_orig_p
                        - id_orig_h_pos
                        - id_resp_h
                        - id_resp_p
                        - id_resp_h_pos
                  availableRows:
                    type: integer
                    description: |
                      Total number of documents in elasticsearch query
                required: 
                  - alarms
                  - availableRows
              example: {
                "alarms": [
                  {
                    "uid": "C93jwR1Bax8LG3ixXa",
                    "host": "ocsp.digicert.com",
                    "timestamp": "2021-03-15T16:42:08Z",
                    "id_orig_h": "10.189.34.26",
                    "id_orig_p": 53685,
                    "id_orig_h_pos": [],
                    "id_resp_h": "72.21.91.29",
                    "id_resp_p": 80,
                    "id_resp_h_pos": [
                      "firehol_anonymous"
                    ]
                  },
                  {
                    "uid": "C93jwR1Bax8LG3ixXa",
                    "host": "ocsp.digicert.com",
                    "timestamp": "2021-03-15T16:42:08Z",
                    "id_orig_h": "10.189.34.26",
                    "id_orig_p": 53685,
                    "id_orig_h_pos": [],
                    "id_resp_h": "72.21.91.29",
                    "id_resp_p": 80,
                    "id_resp_h_pos": [
                      "firehol_anonymous"
                    ]
                  },
                  {
                    "uid": "CI3U8U2GGe7Xgirsnh",
                    "host": "ocsp.digicert.com",
                    "timestamp": "2021-03-15T16:37:29Z",
                    "id_orig_h": "10.189.34.26",
                    "id_orig_p": 53636,
                    "id_orig_h_pos": [],
                    "id_resp_h": "72.21.91.29",
                    "id_resp_p": 80,
                    "id_resp_h_pos": [
                      "firehol_anonymous"
                    ]
                  },
                  {
                    "uid": "CCoVOn4O59OdsLnMYi",
                    "host": "205.189.33.125",
                    "timestamp": "2021-03-15T16:37:25Z",
                    "id_orig_h": "139.162.119.197",
                    "id_orig_p": 53152,
                    "id_orig_h_pos": [
                      "firehol_anonymous"
                    ],
                    "id_resp_h": "192.168.2.125",
                    "id_resp_p": 80,
                    "id_resp_h_pos": []
                  }
                ],
                "availableRows": 67
              }
        '400':
          description: |
            Request parameters are not valid.
          content:
            application/json:
              example: {
                "success": false,
                "message": "Bad request format."
              }
        '401':
          description: |
            User is not authenticated
        '500':
          description: |
            Internal server error

  /api/blacklist/list:
    get:
      summary: List all blacklists
      description: |
        Returns info about the current blacklists
      tags:
      - Blacklist
      responses:
        '200':
          description: |
            List of blacklists
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    description: |
                      Indicator if request was successful
                  blacklists:
                    type: array
                    description: |
                      List of blacklists 
                    items:
                      type: object
                      properties:
                        uuid:
                          type: string
                          description: |
                            Blacklist UUID
                        name:
                          type: string
                          description: |
                            Common blacklist name
                        url:
                          type: string
                          description: |
                            URL that points to blacklist
                      required:
                        - uuid
                        - name
                        - url
                required: 
                  - success
                  - blacklists
              example: {
                "success": true,
                "blacklists": [
                  {
                    "uuid": "1a89f7bb-f84c-4f3d-b9e1-eea523dfb270",
                    "name": "level1",
                    "url": "https://iplists.firehol.org/files/firehol_level1.netset"
                  },
                  {
                    "uuid": "2465fd87-39d3-4005-b4d0-833fc2920626",
                    "name": "level2",
                    "url": "https://iplists.firehol.org/files/firehol_level2.netset"
                  },
                  {
                    "uuid": "71bb55ee-0a76-49a3-bbfd-04debee9f336",
                    "name": "firehol_abusers_1d",
                    "url": "https://iplists.firehol.org/files/firehol_abusers_1d.netset"
                  }
                ]
              }
        '401':
          description: |
            User is not authenticated
        '500':
          description: |
            Internal server error

  /api/blacklist/add:
    post:
      summary: Add new blacklist
      description: |
        Create a new blacklist.
        
        Restrictions:
          - `admin` is the only class of accounts allowed to create blacklists.

      tags:
      - Blacklist
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: |
                    Name of blacklist
                url:
                  type: string
                  description: |
                    URL of blacklist
              required:
                - name
                - url
            example: {
              "name": "firehol_level4",
              "url": "https://iplists.firehol.org/files/firehol_level4.netset"
            }
      responses:
        '200':
          description: |
            Blacklist successfully created.
          content:
            application/json:
              example: {
                "success": true,
                "message": "Blacklist successfully created."
              }
        '400':
          description: |
            Request parameters are not valid.
          content:
            application/json:
              example: {
                "success": false,
                "message": "Bad request format."
              }
        '401':
          description: |
            User is not authenticated
        '403':
          description: |
            User does not have permissions to perform requested actions.
          content:
            application/json:
              example: {
                "success": false,
                "message": "Only an admin can update a blacklist."
              }
        '500':
          description: |
            Internal server error

  /api/blacklist/update:
    post:
      summary: Update existing blacklist
      description: |
        Update existing blacklist.
        
        Restrictions:
          - `admin` is the only class of accounts allowed to update blacklists.

      tags:
      - Blacklist
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                uuid:
                  type: string
                  description: |
                    UUID of blacklist to update
                name:
                  type: string
                  description: |
                    Updated or existing blacklist name
                url:
                  type: string
                  description: |
                    Updated or existing blacklist url
              required:
                - uuid
                - name
                - url
            example: {
              "uuid": "175dd231-f547-4342-a33e-c45d5e99aa7e",
              "name": "fire4",
              "url": "https://iplists.firehol.org/files/firehol_4.netset"
            }
      responses:
        '200':
          description: |
            Blacklist successfully updated.
          content:
            application/json:
              example: {
                "success": true,
                "message": "Successfully updated blacklist."
              }
        '400':
          description: |
            Request parameters are not valid.
          content:
            application/json:
              example: {
                "success": false,
                "message": "Bad request format."
              }
        '401':
          description: |
            User is not authenticated
        '403':
          description: |
            User does not have permissions to perform requested actions.
          content:
            application/json:
              example: {
                "success": false,
                "message": "Only an admin can update a blacklist."
              }
        '500':
          description: |
            Internal server error

  /api/blacklist/delete:
    post:
      summary: Delete existing blacklist
      description: |
        Delete existing blacklist.
        
        Restrictions:
          - `admin` is the only class of accounts allowed to delete blacklists.

      tags:
      - Blacklist
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                uuid:
                  type: string
                  description: |
                    UUID of blacklist to delete
              required:
                - uuid
            example: {
              "uuid": "175dd231-f547-4342-a33e-c45d5e99aa7e"
            }
      responses:
        '200':
          description: |
            Blacklist successfully deleted.
          content:
            application/json:
              example: {
                "success": true,
                "message": "Successfully deleted blacklist."
              }
        '400':
          description: |
            Request parameters are not valid.
          content:
            application/json:
              example: {
                "success": false,
                "message": "Bad request format."
              }
        '401':
          description: |
            User is not authenticated
        '403':
          description: |
            User does not have permissions to perform requested actions.
          content:
            application/json:
              example: {
                "success": false,
                "message": "Only an admin can create a new blacklist."
              }
        '500':
          description: |
            Internal server error

  /api/ingestion/getESMax:
    get:
      summary: Get max elastic search index size.
      description: |
        Gets the max size that elastic search indecies can grow to before a new one is created.
      responses:
        '200':
          description: |
            Max index successfully returned.
          content:
            application/json:
              example: {
                "maxIndexSize": 1000000
              }

  /api/ingestion/getESMax:
    post:
      summary: Set max elastic search index size.
      description: |
        Sets the max size that elastic search indecies can grow to before a new one is created.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                maxIndexSize:
                  type: int
                  description: |
                    Desired max size
              required:
                - maxIndexSize
            example: {
             "maxIndexSize": 1000000
            }
      responses:
        '200':
          description: |
            Max index successfully updated.
          content:
            application/json:
              example: {
                "success" : true,
                "message": "Successfully updated max index size"
              }
        '400':
          description: |
            Request parameters are not valid.
          content:
            application/json:
              example: {
                "success": false,
                "message": "Bad request format."
              }

  /api/ingestion/create:
    post:
      summary: Create new ingestion client.
      description: |
        Pass the name (uuid) of new ingestion client. A crypto random encryption key will be generated and returned. The uuid-key pair will be indexed into elasticsearch.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                uuid:
                  type: string
                  description: |
                    Name of new ingestion client
              required:
                - uuid
            example: {
             "uuid": "Ingestion1"
            }
      responses:
        '200':
          description: |
            New ingestion client successfully indexed.
          content:
            application/json:
              example: {
                "key" : "38f3dfe8880b211d861ec679f91dd28b2c51e296ae6a20b65985277d202439c5"
              }
        '400':
          description: |
            Request parameters are not valid.
          content:
            application/json:
              example: {
                "success": false,
                "message": "Bad request format."
              }
        '500':
          description: |
            Internal server error

  /api/ingestion/delete:
    post:
      summary: Delete ingestion client.
      description: |
        Pass the name (uuid) of ingestion client. Connection will be ended and ingestion uuid will be removed from elasticsearch.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                uuid:
                  type: string
                  description: |
                    Name of ingestion client
              required:
                - uuid
            example: {
             "uuid": "Ingestion1"
            }
      responses:
        '200':
          description: |
            New ingestion client successfully indexed.
          content:
            application/json:
              example: {
                "success": true,
                "message": "Successfully deleted given uuid from ingestion index"
              }
        '400':
          description: |
            Request parameters are not valid.
          content:
            application/json:
              example: {
                "success": false,
                "message": "Bad request format."
              }

  /api/ingestion/list:
    get:
      summary: List all ingestion clients
      description: |
        List ingestion clients in the system.
      tags:
      - Ingestion
      responses:
        '200':
          description: |
            List of users
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    description: |
                      Indicator if request was successful
                  clients:
                    type: array
                    description: |
                      List of users
                    items:
                      type: object
                      properties:
                        uuid:
                          type: string
                          description: |
                            UUID of ingestion client
                        key:
                          type: string
                          description: |
                            Encryption key associated with client
                      required: 
                        - uuid
                        - key
                required:
                  - success
                  - clients
              example: {
                "success": true,
                "clients": [
                  {
                    "uuid": "testdata",
                    "key": "38f3dfe8880b211d861ec679f91dd28b2c51e296ae6a20b65985277d202439c5",
                  }
                ]
              }
                  
        '401':
          description: |
            User is not authenticated
        '500':
          description: |
            Internal server error